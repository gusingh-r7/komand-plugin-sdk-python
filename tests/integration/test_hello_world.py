#!/usr/bin/env python
# GENERATED BY KOMAND SDK - DO NOT EDIT
import komand
import komand.handler
import json
import time
import sys

import concurrent.futures.thread as thread
import concurrent.futures as futures


Name = 'HelloWorld'
Vendor = 'komand'
Version = '1.0.0'
Description = 'Hello World plugin'


input_schema = {
    'type': 'object',
    'properties': {
        'name': {
            'type': 'string'
        }
    },
    'required': ['name']
}

output_schema = {
    'type': 'object',
    'properties': {
        'text': {
            'type': 'string'
        }
    },
    'required': ['text']
}


class Action(komand.Action):

    def __init__(self):
        super(self.__class__, self).__init__(
            name='action',
            description='description',
            input=komand.Input(schema=input_schema),
            output=komand.Output(schema=output_schema)
        )

    def run(self, params={}):
        sys.stderr.write('I am the log\n')
        return {
            'text': self.connection['greeting'].format(params['name'])
        }


class Trigger(komand.Trigger):

    def __init__(self):
        super(self.__class__, self).__init__(
            name='trigger',
            description='description',
            input=komand.Input(schema=input_schema),
            output=komand.Output(schema=output_schema)
        )

    def run(self, params={}):
        while True:
            sys.stderr.write('I am the log\n')
            self.send({
                'text': self.connection['greeting'].format(params['name'])
            })
            time.sleep(10)


class Plugin(komand.Plugin):
    def __init__(self):
        super(self.__class__, self).__init__(
            name=Name,
            vendor=Vendor,
            version=Version,
            description=Description,
            connection=komand.Connection(input=komand.Input(schema={
                'type': 'object',
                'properties': {
                    'greeting': {
                        'type': 'string'
                    }
                },
                'required': ['greeting']
            }))
        )

        self.add_action(Action())

        self.add_trigger(Trigger())


caught_message = None


def wait_for_caught_message():
    while True:
        if caught_message:
            return caught_message
        time.sleep(1)


class CaptureDispatcher:

    def write(self, msg):
        global caught_message
        caught_message = msg


plugin = Plugin()
handler = komand.handler.StepHandler(plugin)
plugin.triggers['trigger'].dispatcher = CaptureDispatcher()


def test_action():
    input_message = json.load(open('./tests/integration/action/input.json'))
    expected_output = json.load(open('./tests/integration/action/output.json'))
    output = handler.handle_step(input_message)
    assert output == expected_output


def test_trigger():
    input_message = json.load(open('./tests/integration/trigger/input.json'))
    expected_output = json.load(open('./tests/integration/trigger/output.json'))

    e = thread.ThreadPoolExecutor()
    trigger_future = e.submit(handler.handle_step, input_message, is_debug=True)
    future = e.submit(wait_for_caught_message)
    out = futures.wait([future], timeout=10)
    done = out.done
    trigger_future.cancel()
    future.cancel()

    if len(done) <= 0:
        raise Exception('Timeout')

    assert caught_message == expected_output


